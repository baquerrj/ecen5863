// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files from any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Intel Program License
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other
// applicable license agreement, including, without limitation,
// that your use is for the sole purpose of programming logic
// devices manufactured by Intel and sold by Intel or its
// authorized distributors.  Please refer to the applicable
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to
// suit user's needs .Comments are provided in each section to help the user
// fill out necessary details.
// *****************************************************************************
// Generated on "11/03/2019 21:12:19"

// Verilog Test Bench template for design : Counter
//
// Simulation tool : ModelSim-Altera (Verilog)
//

`timescale 1 ns/ 100 ps

module Counter_tb();

parameter T = 20;	// 50 MHz

// test vector input registers
reg clk;
reg resetn;
// count
wire [15:0] Q;
// wires
wire TC;

Counter Counter_0 (
	.TC(TC),
	.clk(clk),
	.resetn(resetn),
	.Q(Q)
);

///////////////////////////////////////////////////////////////////////////////
// Initialize signals
///////////////////////////////////////////////////////////////////////////////
initial
begin
   clk = 1'b0;
   resetn = 1'b0;
   #T;
   resetn = 1'b1;
	$display("Running testbench");
end

///////////////////////////////////////////////////////////////////////////////
// Clock driver
///////////////////////////////////////////////////////////////////////////////
always @(clk)
begin
	#(T / 2.0);
	clk <= !clk;
end

endmodule

