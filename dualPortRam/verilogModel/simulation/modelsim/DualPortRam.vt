// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions
// and other software and tools, and its AMPP partner logic
// functions, and any output files from any of the foregoing
// (including device programming or simulation files), and any
// associated documentation or information are expressly subject
// to the terms and conditions of the Intel Program License
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other
// applicable license agreement, including, without limitation,
// that your use is for the sole purpose of programming logic
// devices manufactured by Intel and sold by Intel or its
// authorized distributors.  Please refer to the applicable
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to
// suit user's needs .Comments are provided in each section to help the user
// fill out necessary details.
// *****************************************************************************
// Generated on "10/29/2019 20:13:05"

// Verilog Test Bench template for design : DualPortRam
//
// Simulation tool : ModelSim-Altera (Verilog)
//

`timescale 1 ps/ 1 ps
module DualPortRam_tb();
// test vector input registers
reg clk;
reg [7:0] d;
reg [2:0] r_addr;
reg [2:0] w_addr;
reg we;
// wires
wire [7:0]  q;

reg [7:0] mem [2**3-1:0];

// assign statements (if any)
DualPortRam uut (
// port map - connection between master ports and signals/registers
	.clk(clk),
	.d(d),
	.q(q),
	.r_addr(r_addr),
	.w_addr(w_addr),
	.we(we)
);

initial
begin
	clk = 1'b0;
	d = 8'h00;
	r_addr = 3'b000;
	w_addr = 3'b000;
	we = 1'b0;
	$display("Loading RAM");
	$readmemh("initialRAM.txt", mem);
	$monitor("%h", q);
end

integer i = 0;

always
begin
	clk = ~clk;
	#10;
end

always @(posedge clk)
begin
	if (i==8)
		begin
			$finish;
		end
	i <= i + 1;
	r_addr <= i;
end

always @(posedge clk)
begin
	if (mem[r_addr] != q)
		begin
			$display("mem[%d]=%h but q=%h", r_addr, mem[r_addr], q);
		end
end
endmodule

